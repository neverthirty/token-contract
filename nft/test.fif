
"TonUtil.fif" include
"Asm.fif" include

// $ -- id
{ $>B crc16 0xffff and 0x10000 or } : method_id

{ rot = -rot = and } : 2=
{ 2= not } : 2<>

// s -- wc addr s'
{ 1 i@+ swap not abort"Internal address expected"
  1 i@+
  1 i@+ swap { 4 u@+ swap u@+ nip } if
  swap { 9 u@+ 32 } { 256 swap 8 } cond
  i@+ rot u@+
} : addr@+
{ addr@+ drop } : addr@

// s len -- res s'
{ tuck u@+ -rot swap
  <b -rot u, b> <s swap
} : s@+ // TODO: support for more than 256 bits or rather add C++ code for it
{ s@+ drop } : s@

// s -- addr s'
{ 1 i@+ swap abort"External address expected"
  1 i@+ swap
  { 9 u@+ swap s@+ }
  { x{} swap } cond
} : ext-addr@+
{ ext-addr@+ drop } : ext-addr@

// s --
{
  1 i@+ swap { ."not an internal message" cr 0 halt } if
  1 i@+ swap =: msg.ihr-disabled
  1 i@+ swap =: msg.bounce
  1 i@+ nip
  2 u@+ swap 0 <> { ."src = none expected" cr 0 halt } if
  addr@+ -rot 2=: msg.dest
  Gram@+ swap =: msg.value
  1 i@+ swap { ref@+ swap } { null } cond =: msg.extra
  Gram@+ nip Gram@+ nip
  64 u@+ nip 32 u@+ nip
  1 i@+ swap { ref@+ } { null } cond =: msg.stateInit
  1 i@+ swap { ref@ } { s>c } cond =: msg.body
} : parse-int-msg

// s --
{
  2 u@+ swap 3 <> { ."not an outbound external message" cr 0 halt } if
  2 u@+ swap 0 <> { ."src = none expected" cr 0 halt } if
  ext-addr@+ swap =: msg.dest
  64 u@+ nip 32 u@+ nip
  1 i@+ swap { ref@+ } { null } cond =: msg.stateInit
  1 i@+ swap { ref@ } { s>c } cond =: msg.body
 } : parse-ext-msg

// s --
{
  dup 1 i@
  { `ext =: msg.type parse-ext-msg }
  { `int =: msg.type parse-int-msg } cond
} : parse-msg

"compiled.fif" include <s constant code

<b
"0:448bcf827469c5fc38541c77fdd91d4e347eac200f6f2d9fd62dc08885f0415f" parse-smc-addr drop Addr,
0 64 u,
<b
<b
1 8 u,
"https://ton.org/collection.json" $,
b> ref,
<b
"https://ton.org/meta/" $,
b> ref,
b> ref,
B{} B>boc ref,
<b
0 16 u,
0 16 u,
0 2 u,
b> ref,
<b
3500 16 u,
1000 16 u,
375 16 u,
100 16 u,
25 16 u,
200 16 u,
100 16 u,
100 16 u,
100 16 u,
100 16 u,
0 16 u,
0 16 u,
0 16 u,
0 16 u,
0 16 u,
b> ref,
b> constant storage

dictnew
 constant global_config

<b <b b{00110} s, <b code s, b> ref, storage ref, b>
hashu -1 swap addr, b> <s constant contract_address


"0:448bcf827469c5fc38541c77fdd91d4e347eac200f6f2d9fd62dc08885f0415f" // sender address
parse-smc-addr drop 2constant sender_address0

10000000000 constant msg_value0 // in_msg amount

<b
5 32 u,
0 64 u,
<b
200 16 u,
100 16 u,
100 16 u,
100 16 u,
100 16 u,
b> ref,
b> constant in_msg_body0

<b b{0110} s, // flags
   sender_address0 Addr, // sender address
   sender_address0 Addr, // dest address
   0 Gram,  // value
   0 1 u, // extra currency dict
   0 Gram, // ihr_fee
   0 Gram, // fwd_fee
b> constant in_msg0

0x076ef1ea           // magic
0                    // actions
0                    // msgs_sent
1628090356           // unixtime
1                    // block_lt
999                    // trans_lt
239                  // randseed
1000000000 null pair // balance_remaining
contract_address     // myself
global_config        // global_config
10 tuple 1 tuple constant c7

msg_value0 in_msg0 in_msg_body0 <s 0 code storage c7 0x75 runvmx
// returns ...values exit_code new_c4 c5
swap rot

dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond


<b
"0:448bcf827469c5fc38541c77fdd91d4e347eac200f6f2d9fd62dc08885f0415f" parse-smc-addr drop Addr,
0 64 u,
<b
<b
1 8 u,
"https://ton.org/collection.json" $,
b> ref,
<b
"https://ton.org/meta/" $,
b> ref,
b> ref,
B{} B>boc ref,
<b
0 16 u,
0 16 u,
0 2 u,
b> ref,
<b
3500 16 u,
1000 16 u,
375 16 u,
100 16 u,
25 16 u,
200 16 u,
100 16 u,
100 16 u,
100 16 u,
100 16 u,
0 16 u,
0 16 u,
0 16 u,
0 16 u,
0 16 u,
b> ref,
b> constant correct_new_storage
hashu correct_new_storage hashu <> { ."Error: incorrect resulting storage" cr 0 halt } if



<s dup 0 swap { dup empty? not } {
  ref@ <s swap 1+ swap
} while drop
0 <> { ."Error: incorrect number of actions" cr 0 halt } if


drop
    



0 <b
"test" $,
b>
"get_nft_content" method_id code storage c7 0x15 runvmx drop
dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond

depth 1 <>
{ ."Error: incorrect output length of get_nft_content; output: " .s cr 0 halt } if
 hashu <b
1 8 u,
"https://ton.org/meta/0000.json" $,
b> hashu = not { ."Error: incorrect output value" cr 0 halt } if


254 <b
b>
"get_nft_content" method_id code storage c7 0x15 runvmx drop
dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond

depth 1 <>
{ ."Error: incorrect output length of get_nft_content; output: " .s cr 0 halt } if
 hashu <b
1 8 u,
"https://ton.org/meta/00FE.json" $,
b> hashu = not { ."Error: incorrect output value" cr 0 halt } if


0
"get_nft_type_sales_info" method_id code storage c7 0x15 runvmx drop
dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond

depth 4 <>
{ ."Error: incorrect output length of get_nft_type_sales_info; output: " .s cr 0 halt } if
0 = not { ."Error: incorrect output value" cr 0 halt } if
200 = not { ."Error: incorrect output value" cr 0 halt } if
3500 = not { ."Error: incorrect output value" cr 0 halt } if
1500 = not { ."Error: incorrect output value" cr 0 halt } if


1
"get_nft_type_sales_info" method_id code storage c7 0x15 runvmx drop
dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond

depth 4 <>
{ ."Error: incorrect output length of get_nft_type_sales_info; output: " .s cr 0 halt } if
0 = not { ."Error: incorrect output value" cr 0 halt } if
100 = not { ."Error: incorrect output value" cr 0 halt } if
1000 = not { ."Error: incorrect output value" cr 0 halt } if
500 = not { ."Error: incorrect output value" cr 0 halt } if


2
"get_nft_type_sales_info" method_id code storage c7 0x15 runvmx drop
dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond

depth 4 <>
{ ."Error: incorrect output length of get_nft_type_sales_info; output: " .s cr 0 halt } if
0 = not { ."Error: incorrect output value" cr 0 halt } if
100 = not { ."Error: incorrect output value" cr 0 halt } if
375 = not { ."Error: incorrect output value" cr 0 halt } if
125 = not { ."Error: incorrect output value" cr 0 halt } if


3
"get_nft_type_sales_info" method_id code storage c7 0x15 runvmx drop
dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond

depth 4 <>
{ ."Error: incorrect output length of get_nft_type_sales_info; output: " .s cr 0 halt } if
0 = not { ."Error: incorrect output value" cr 0 halt } if
100 = not { ."Error: incorrect output value" cr 0 halt } if
100 = not { ."Error: incorrect output value" cr 0 halt } if
25 = not { ."Error: incorrect output value" cr 0 halt } if


4
"get_nft_type_sales_info" method_id code storage c7 0x15 runvmx drop
dup { ."Error: non-zero exit code (" . .")" cr 0 halt } { drop } cond

depth 4 <>
{ ."Error: incorrect output length of get_nft_type_sales_info; output: " .s cr 0 halt } if
0 = not { ."Error: incorrect output value" cr 0 halt } if
100 = not { ."Error: incorrect output value" cr 0 halt } if
25 = not { ."Error: incorrect output value" cr 0 halt } if
0 = not { ."Error: incorrect output value" cr 0 halt } if



."All tests passed" cr
