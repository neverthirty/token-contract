;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

(slice, int, cell, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref(), ;; royalty_params
     ds~load_ref()  ;; sales_info
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell sales_info) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .store_ref(sales_info)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() send_with_comment(slice to_address, int amount, slice comment, int send_mode) impure {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0, 32) ;; op 0 - comment 
    .store_slice(comment); ;; max 64 symbols

  send_raw_message(msg.end_cell(), send_mode);
}


(int, int, cell) deploy_process(slice sender_address, slice owner_address, cell nft_item_code, cell sales_info, int nft_type, int nft_count) impure {
  slice sales_info_slice = sales_info.begin_parse();
  (int start_index, int hard_limit, int soft_limit, int sales_count) = unpack_sales_info(sales_info_slice, nft_type);
  if (hard_limit <= sales_count) {
    send_with_comment(sender_address, 0, "Sold out", 64);
    return (0, 0, sales_info);
  }

  int available_for_sale = min(hard_limit, soft_limit) - sales_count;
  int count_for_sale = min(min(available_for_sale, nft_count), 250);
  if (count_for_sale <= 0) {
    send_with_comment(sender_address, 0, "Minting is on pause", 64);
    return (0, 0, sales_info);
  }

  int next_index = start_index + sales_count;
  repeat (count_for_sale) {
    int deploy_msg_value = 100000000;
    cell nft_content = begin_cell()
      .store_slice(sender_address)
      ;; .store_ref(generate_content_from_index(next_index))
      .store_ref(begin_cell().end_cell())
      .store_slice(owner_address)
      .end_cell();

    deploy_nft_item(next_index, nft_item_code, deploy_msg_value, nft_content);
    next_index += 1;
  }

  cell new_sales_info = pack_and_update_sales_count(sales_info_slice, nft_type, sales_count + count_for_sale);
  return (count_for_sale, next_index, new_sales_info);
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body.slice_empty?() ? 0 : in_msg_body~load_uint(32);
    int query_id = in_msg_body.slice_empty?() ? 0 : in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, sales_info) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    if (op == 0) {  ;; buy new nft
      (int nft_price, int nft_type, int nft_count) = get_type_from_value(msg_value);
      var (count_for_sale, next_index, new_sales_info) = deploy_process(sender_address, owner_address, nft_item_code, sales_info, nft_type, nft_count);

      if ((count_for_sale < nft_count) & (count_for_sale != 0)) {
        int amount_to_send = (nft_count - count_for_sale) * nft_price * 1000000000 - 100000000;
        if (amount_to_send > 100000000) {
          send_with_comment(sender_address, amount_to_send, "Partially sold. Change return", 3);
        }
      }

      save_data(owner_address, max(next_item_index, next_index), content, nft_item_code, royalty_params, new_sales_info);
      return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 1) { ;; deploy new nft
      int nft_type = in_msg_body~load_uint(8);
      int nft_count = in_msg_body~load_uint(8);

      var (_, next_index, new_sales_info) = deploy_process(sender_address, owner_address, nft_item_code, sales_info, nft_type, nft_count);
      save_data(owner_address, max(next_item_index, next_index), content, nft_item_code, royalty_params, new_sales_info);
      return ();
    }
    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, sales_info);
      return ();
    }
    if (op == 4) { ;; change content
      save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref(), sales_info);
      return ();
    }
    if (op == 5) { ;; update sales soft limits
      cell new_sales_info = pack_and_update_soft_limits(sales_info.begin_parse(), in_msg_body.preload_ref().begin_parse());
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_sales_info);
      return ();
    }
    if (op == 6) { ;; admin request
      int mode = in_msg_body~load_uint(8);
      cell msg = in_msg_body.preload_ref();

      send_raw_message(msg, mode);
      return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty, _) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_slice("-")
                      .store_slice(individual_nft_content.begin_parse())
                      .store_slice("-")
                      .store_int_as_hex_string(index, 4)
                      .store_slice(".json")
          .end_cell());
}

(int, int, int, int) get_nft_type_sales_info(int nft_type) method_id {
  var (_, _, _, _, _, sales_info) = load_data();
  return unpack_sales_info(sales_info.begin_parse(), nft_type);
}